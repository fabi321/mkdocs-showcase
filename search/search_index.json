{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docs deployment auf Github-Pages mit mkdocs MkDocs installieren pip install mkdocs mkdocs-material Verwendung des Proxy In der Schule muss Python die Verwendung des Proxy mittgeteilt werden. Dies geschieht durch die Option --proxy. Der resultierende Befehl sieht also wie folgt aus: pip --proxy http://kjs-03.lan.dd-schulen.de:3128 install mkdocs mkdocs-material Mit mkdocs anfangen Zuerst muss man eine mkdocs.yml Datei anlegen, die die Struktur und das Aussehen der Dokumentation beschreibt. Ein Beispiel k\u00f6nnte wie folgt aussehen: site_name: Projektname nav: - index.md theme: material markdown_extensions: - admonition - pymdownx.details - pymdownx.superfences Dazu ben\u00f6tigt man eine Verzeichnisstruktur wie folgt: Projektverzeichnis |- mkdocs.yml \\- docs \\- index.md Dokumentationen Lokal ansehen Dazu f\u00fchrt man mkdocs mit dem Unterbefehl serve wie folgt aus mkdocs serve Befehl konnte nicht gefunden werden Falls mkdocs installiert ist, es aber von der Git Bash nicht gefunden werden kann, ist es wahrscheinlich nicht im PATH enthalten. F\u00fcr diesen Fall muss der Befehl mkdocs durch folgenden Befehl ersetzt werden: ~/AppData/Roaming/Python/Python310/Scripts/mkdocs.exe Anschlie\u00dfend kann man sich die Dokumentation unter localhost:8000 ansehen. Der Webserver kann durch dr\u00fccken von Strg+C beendet werden. Auf Github-Pages deployen Github-Pages ist f\u00fcr jedes Repository auf Github verf\u00fcgbar. Um eine MkDocs-Seite \u00fcber Github-Pages verf\u00fcgbar zu machen, muss man zuerst den Subbefehl gh-deploy von MkDocs ausf\u00fchren: mkdocs gh-deploy ~/AppData/Roaming/Python/Python310/Scripts/mkdocs.exe gh-deploy Anschlie\u00dfend sollte Github automatisch ein Github-Pages Environment hinzuf\u00fcgen, welches die Seite unter https://<username>.github.io/<repositoryName> verf\u00fcgbar machen. Optional: Einrichten einer CI-Pipeline Durch das einrichten einer CI-Pipeline kann man das aufrufen von mkdocs gh-deploy automatisieren. Dazu muss man folgenden Inhalt in die Datei .github/workflows/ci.yml im Projektverzeichnis schreiben: name: ci on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install mkdocs-material - run: mkdocs gh-deploy --force","title":"Docs deployment auf Github-Pages mit mkdocs"},{"location":"#docs-deployment-auf-github-pages-mit-mkdocs","text":"","title":"Docs deployment auf Github-Pages mit mkdocs"},{"location":"#mkdocs-installieren","text":"pip install mkdocs mkdocs-material Verwendung des Proxy In der Schule muss Python die Verwendung des Proxy mittgeteilt werden. Dies geschieht durch die Option --proxy. Der resultierende Befehl sieht also wie folgt aus: pip --proxy http://kjs-03.lan.dd-schulen.de:3128 install mkdocs mkdocs-material","title":"MkDocs installieren"},{"location":"#mit-mkdocs-anfangen","text":"Zuerst muss man eine mkdocs.yml Datei anlegen, die die Struktur und das Aussehen der Dokumentation beschreibt. Ein Beispiel k\u00f6nnte wie folgt aussehen: site_name: Projektname nav: - index.md theme: material markdown_extensions: - admonition - pymdownx.details - pymdownx.superfences Dazu ben\u00f6tigt man eine Verzeichnisstruktur wie folgt: Projektverzeichnis |- mkdocs.yml \\- docs \\- index.md","title":"Mit mkdocs anfangen"},{"location":"#dokumentationen-lokal-ansehen","text":"Dazu f\u00fchrt man mkdocs mit dem Unterbefehl serve wie folgt aus mkdocs serve Befehl konnte nicht gefunden werden Falls mkdocs installiert ist, es aber von der Git Bash nicht gefunden werden kann, ist es wahrscheinlich nicht im PATH enthalten. F\u00fcr diesen Fall muss der Befehl mkdocs durch folgenden Befehl ersetzt werden: ~/AppData/Roaming/Python/Python310/Scripts/mkdocs.exe Anschlie\u00dfend kann man sich die Dokumentation unter localhost:8000 ansehen. Der Webserver kann durch dr\u00fccken von Strg+C beendet werden.","title":"Dokumentationen Lokal ansehen"},{"location":"#auf-github-pages-deployen","text":"Github-Pages ist f\u00fcr jedes Repository auf Github verf\u00fcgbar. Um eine MkDocs-Seite \u00fcber Github-Pages verf\u00fcgbar zu machen, muss man zuerst den Subbefehl gh-deploy von MkDocs ausf\u00fchren: mkdocs gh-deploy ~/AppData/Roaming/Python/Python310/Scripts/mkdocs.exe gh-deploy Anschlie\u00dfend sollte Github automatisch ein Github-Pages Environment hinzuf\u00fcgen, welches die Seite unter https://<username>.github.io/<repositoryName> verf\u00fcgbar machen.","title":"Auf Github-Pages deployen"},{"location":"#optional-einrichten-einer-ci-pipeline","text":"Durch das einrichten einer CI-Pipeline kann man das aufrufen von mkdocs gh-deploy automatisieren. Dazu muss man folgenden Inhalt in die Datei .github/workflows/ci.yml im Projektverzeichnis schreiben: name: ci on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 with: python-version: 3.x - run: pip install mkdocs-material - run: mkdocs gh-deploy --force","title":"Optional: Einrichten einer CI-Pipeline"}]}